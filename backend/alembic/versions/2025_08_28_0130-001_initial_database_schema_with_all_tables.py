"""Initial database schema with all tables

Revision ID: 001
Revises: 
Create Date: 2025-08-28 01:30:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '001'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Install pg_trgm extension for fuzzy string matching
    op.execute('CREATE EXTENSION IF NOT EXISTS pg_trgm;')
    
    op.create_table('hierarchies',
    sa.Column('hierarchy_id', sa.Integer(), nullable=False),
    sa.Column('level_1', sa.String(length=255), nullable=True),
    sa.Column('level_2', sa.String(length=255), nullable=True),
    sa.Column('level_3', sa.String(length=255), nullable=True),
    sa.Column('level_4', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('hierarchy_id', name=op.f('pk_hierarchies'))
    )
    
    op.create_table('vendors',
    sa.Column('vendor_id', sa.Integer(), nullable=False),
    sa.Column('vendor_name', sa.String(length=255), nullable=False),
    sa.Column('partner_business_manager', sa.String(length=255), nullable=True),
    sa.Column('salesforce_link', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('vendor_id', name=op.f('pk_vendors')),
    sa.UniqueConstraint('vendor_name', name=op.f('uq_vendors_vendor_name'))
    )
    
    op.create_table('accounts',
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('account_name', sa.String(length=255), nullable=False),
    sa.Column('hierarchy_id', sa.Integer(), nullable=True),
    sa.Column('account_type', sa.String(length=100), nullable=True),
    sa.Column('url', sa.Text(), nullable=True),
    sa.Column('products', sa.Text(), nullable=True),
    sa.Column('capabilities', sa.Text(), nullable=True),
    sa.Column('use_cases', sa.Text(), nullable=True),
    sa.Column('primary_industry', sa.String(length=255), nullable=True),
    sa.Column('industries_served', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['hierarchy_id'], ['hierarchies.hierarchy_id'], name=op.f('fk_accounts_hierarchy_id_hierarchies')),
    sa.PrimaryKeyConstraint('account_id', name=op.f('pk_accounts')),
    sa.UniqueConstraint('account_name', name=op.f('uq_accounts_account_name'))
    )
    
    op.create_table('agent_logs',
    sa.Column('log_id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('raw_name_processed', sa.String(length=255), nullable=True),
    sa.Column('action_taken', sa.String(length=100), nullable=True),
    sa.Column('resulting_account_id', sa.Integer(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('llm_output', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('perplexity_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['resulting_account_id'], ['accounts.account_id'], name=op.f('fk_agent_logs_resulting_account_id_accounts')),
    sa.PrimaryKeyConstraint('log_id', name=op.f('pk_agent_logs'))
    )
    
    op.create_table('customer_name_aliases',
    sa.Column('alias_id', sa.Integer(), nullable=False),
    sa.Column('raw_name', sa.String(length=255), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.account_id'], name=op.f('fk_customer_name_aliases_account_id_accounts')),
    sa.PrimaryKeyConstraint('alias_id', name=op.f('pk_customer_name_aliases')),
    sa.UniqueConstraint('raw_name', name=op.f('uq_customer_name_aliases_raw_name'))
    )
    
    op.create_table('transactions',
    sa.Column('transaction_id', sa.Integer(), nullable=False),
    sa.Column('pos_report_id', sa.Integer(), nullable=True),
    sa.Column('transaction_date', sa.Date(), nullable=True),
    sa.Column('product_sku', sa.String(length=100), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=True),
    sa.Column('sale_amount', sa.Numeric(precision=12, scale=2), nullable=True),
    sa.Column('account_id', sa.Integer(), nullable=True),
    sa.Column('vendor_id', sa.Integer(), nullable=True),
    sa.Column('original_customer_name', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.account_id'], name=op.f('fk_transactions_account_id_accounts')),
    sa.ForeignKeyConstraint(['vendor_id'], ['vendors.vendor_id'], name=op.f('fk_transactions_vendor_id_vendors')),
    sa.PrimaryKeyConstraint('transaction_id', name=op.f('pk_transactions'))
    )
    
    # Create indexes for better performance
    op.create_index('ix_accounts_account_name_trgm', 'accounts', ['account_name'], postgresql_using='gin', postgresql_ops={'account_name': 'gin_trgm_ops'})
    op.create_index('ix_customer_name_aliases_raw_name_trgm', 'customer_name_aliases', ['raw_name'], postgresql_using='gin', postgresql_ops={'raw_name': 'gin_trgm_ops'})
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    op.drop_index('ix_customer_name_aliases_raw_name_trgm', table_name='customer_name_aliases')
    op.drop_index('ix_accounts_account_name_trgm', table_name='accounts')
    op.drop_table('transactions')
    op.drop_table('customer_name_aliases')
    op.drop_table('agent_logs')
    op.drop_table('accounts')
    op.drop_table('vendors')
    op.drop_table('hierarchies')
    
    # Drop pg_trgm extension
    op.execute('DROP EXTENSION IF EXISTS pg_trgm;')
    
    # ### end Alembic commands ###
